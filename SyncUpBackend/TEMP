
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Box, Typography, Button, TextField, List, ListItem, ListItemText, Drawer, Divider } from '@mui/material';
import { createTheme, ThemeProvider } from '@mui/material/styles';

// Create a custom theme
const theme = createTheme({
  palette: {
    primary: {
      main: '#611F69', // Purple color for the theme
    },
    secondary: {
      main: '#fff', // White color for secondary elements
    },
    background: {
      default: '#f5f5f5', // Light gray background for the app
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        contained: {
          borderRadius: 20, // Rounded corners for buttons
        },
      },
    },
    MuiDrawer: {
      styleOverrides: {
        paper: {
          backgroundColor: '#611F69', // Purple background for the drawer
          color: '#fff', // White text color in the drawer
        },
      },
    },
  },
});

const App = () => {
  const [channels, setChannels] = useState([]);
  const [selectedChannel, setSelectedChannel] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [newChannelName, setNewChannelName] = useState('');
  const [addUserEmail, setAddUserEmail] = useState(''); // New state for adding user by email
  const [token, setToken] = useState(null);

  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    if (storedToken) {
      setToken(storedToken);
    } else {
      console.error('Token not found');
    }
  }, []);

  useEffect(() => {
    const fetchChannels = async () => {
      if (!token) return;

      try {
        const user = JSON.parse(localStorage.getItem('user'));
        const response = await axios.get('http://localhost:5000/api/channels', {
          headers: { Authorization: `Bearer ${token}` },
          params: { userId: user._id },
        });
        setChannels(response.data);
      } catch (error) {
        console.error('Error fetching channels:', error);
      }
    };

    fetchChannels();
  }, [token]);

  useEffect(() => {
    if (selectedChannel && token) {
      const fetchMessages = async () => {
        try {
          const response = await axios.get(`http://localhost:5000/api/channels/${selectedChannel}/messages`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          setMessages(response.data);
        } catch (error) {
          console.error('Error fetching messages:', error);
        }
      };

      fetchMessages();
    }
  }, [selectedChannel, token]);

  const handleSendMessage = async () => {
    if (newMessage.trim() === '' || !selectedChannel) return;

    try {
      const response = await axios.post(
        `http://localhost:5000/api/channels/${selectedChannel}/messages`,
        { message: newMessage },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setMessages([...messages, response.data]);
      setNewMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const handleSelectChannel = (channelId) => {
    setSelectedChannel(channelId);
  };

  const handleCreateChannel = async () => {
    if (newChannelName.trim() === '') return;

    try {
      const response = await axios.post(
        'http://localhost:5000/api/channels',
        { name: newChannelName },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setChannels([...channels, response.data]);
      setNewChannelName(''); // Clear the input field
    } catch (error) {
      console.error('Error creating channel:', error);
    }
  };

  const handleAddUserToChannel = async () => {
    if (addUserEmail.trim() === '' || !selectedChannel) return;

    try {
      await axios.post(
        `http://localhost:5000/api/channels/${selectedChannel}/add-user`,
        { email: addUserEmail },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert('User added successfully');
      setAddUserEmail(''); // Clear input after adding the user
    } catch (error) {
      console.error('Error adding user to channel:', error);
      alert('Failed to add user');
    }
  };

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ display: 'flex', height: '100vh', backgroundColor: '#f5f5f5' }}>
        {/* Sidebar for channels */}
        <Drawer
          variant="permanent"
          anchor="left"
          sx={{
            width: 240,
            flexShrink: 0,
            '& .MuiDrawer-paper': { width: 240, boxSizing: 'border-box', backgroundColor: '#611F69', color: '#fff' },
          }}
        >
          <Box sx={{ p: 2 }}>
            <Typography variant="h6">Channels</Typography>
            <List>
              {channels.map((channel) => (
                <ListItem button key={channel._id} onClick={() => handleSelectChannel(channel._id)}>
                  <ListItemText primary={channel.name} />
                </ListItem>
              ))}
            </List>
            <Divider sx={{ my: 2 }} />
            {/* New channel input */}
            <Box sx={{ mt: 2 }}>
              <TextField
                label="New Channel"
                variant="outlined"
                fullWidth
                value={newChannelName}
                onChange={(e) => setNewChannelName(e.target.value)}
                sx={{ mb: 1 }}
              />
              <Button variant="contained" fullWidth onClick={handleCreateChannel}>
                Add Channel
              </Button>
            </Box>
          </Box>
        </Drawer>

        {/* Main Chat Window */}
        <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>
          {/* Messages Display */}
          <Box sx={{ flexGrow: 1, p: 2, overflowY: 'auto', borderBottom: '1px solid #ccc' }}>
            {selectedChannel ? (
              <>
                <Typography variant="h6" gutterBottom>
                  {channels.find((ch) => ch._id === selectedChannel)?.name || 'Channel Messages'}
                </Typography>
                {messages.map((msg) => (
                  <Box key={msg._id} sx={{ mb: 2 }}>
                    <Typography variant="body2" color="textSecondary">
                      {msg.sender}:
                    </Typography>
                    <Typography variant="body1">{msg.message}</Typography>
                  </Box>
                ))}
              </>
            ) : (
              <Typography variant="body1">Select a channel to view messages</Typography>
            )}
          </Box>

          {/* Message Input */}
          {selectedChannel && (
            <Box sx={{ p: 2, display: 'flex', alignItems: 'center', borderTop: '1px solid #ccc' }}>
              <TextField
                variant="outlined"
                fullWidth
                placeholder="Type your message..."
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                sx={{ mr: 2 }}
              />
              <Button onClick={handleSendMessage} variant="contained">
                Send
              </Button>
            </Box>
          )}

          {/* Add user to channel */}
          {selectedChannel && (
            <Box sx={{ p: 2, display: 'flex', alignItems: 'center', borderTop: '1px solid #ccc' }}>
              <TextField
                variant="outlined"
                fullWidth
                label="Add user by email"
                value={addUserEmail}
                onChange={(e) => setAddUserEmail(e.target.value)}
                sx={{ mr: 2 }}
              />
              <Button onClick={handleAddUserToChannel} variant="contained" color="secondary">
                Add User
              </Button>
            </Box>
          )}
        </Box>
      </Box>
    </ThemeProvider>
  );
};

export default App;
